usethis::use_gpl3_license("rafliassign4")
install.packages("usethis")
usethis::use_gpl3_license("rafliassign4")
usethis::use_gpl3_license()
usethis::use_shiny_app("my_app")
# Load necessary libraries
library(dplyr)
library(readxl)
# Read the raw data
olym_rawdata <- read_csv("data-raw/dataset_olympics.csv")
install.packages("tidyverse")
# Load necessary libraries
library(dplyr)
library(tidyverse)
library(readxl)
# Read the raw data
olym_rawdata <- read_csv("data-raw/dataset_olympics.csv")
attr_rawdata <- read_xlsx("data-raw/toughestsport_attributes.xlsx")
# Perform cleaning operations
# Step 1: Clean Olympics Data
## Remove irrelevant columns and filter for relevant Olympic editions
oly_data <- olym_rawdata |>
select(-Medal, -Games, -ID, -Season) |>  # Remove unnecessary columns
filter(Year >= 1948) |>                 # Filter for Olympics after 1948
drop_na()                               # Remove rows with NA values
## Step 2: Manipulate Sport Names for Easier Processing
oly_data <- oly_data |>
mutate(Sport = case_when(
Sport %in% c("Luge", "Skeleton") ~ "Bobsleigh",
Sport %in% c("Taekwondo", "Judo") ~ "Martial Arts",
Sport == "Softball" ~ "Baseball",
Sport == "Short Track Speed Skating" ~ "Speed Skating",
TRUE ~ Sport)) |>                      # Default case to retain original names
# Use regex to rename based on the "Event" column
mutate(Sport = case_when(
grepl("Pole Vault", Event) & Sport == "Athletics" ~ "Athletics_PoleVault",
grepl("High Jump", Event) & Sport == "Athletics" ~ "Athletics_HighJumps",
grepl("Throw|Shot Put", Event) & Sport == "Athletics" ~ "Athletics_Weights",
grepl("100|110|200|400", Event) & Sport == "Athletics" ~ "Athletics_Sprints",
grepl("800|1,500|3,000", Event) & Sport == "Athletics" ~ "Athletics_MidDistance",
grepl("5,000|10,000", Event) & Sport == "Athletics" ~ "Athletics_LongDistance",
grepl("Sprint", Event) & Sport == "Cycling" ~ "Cycling_Sprints",
grepl("50 metres|100 metres", Event) & Sport == "Swimming" ~ "Swimming_Sprints",
TRUE ~ Sport)) |>                      # Default case to retain original names
# Further refining Sport names
mutate(Sport = case_when(
Sport == "Swimming" ~ "Swimming_Distance",
Sport == "Cycling" ~ "Cycling_Distance",
grepl("Jump", Event) & Sport == "Athletics" ~ "Athletics_Jumps",
TRUE ~ Sport)) |>                      # Final default case
## Step 3: Create a Summary by Year
oly_byyear <- oly_data |>
group_by(Year) |>                        # Group by Year
distinct(Sport) |>                       # Get distinct Sports for each year
ungroup()                                # Ungroup to return to normal data frame
# Load necessary libraries
library(dplyr)
library(tidyverse)
library(readxl)
# Read the raw data
olym_rawdata <- read_csv("data-raw/dataset_olympics.csv")
attr_rawdata <- read_xlsx("data-raw/toughestsport_attributes.xlsx")
# Perform cleaning operations
# Step 1: Clean Olympics Data
## Remove irrelevant columns and filter for relevant Olympic editions
oly_data <- olym_rawdata |>
select(-Medal, -Games, -ID, -Season) |>  # Remove unnecessary columns
filter(Year >= 1948) |>                 # Filter for Olympics after 1948
drop_na()                               # Remove rows with NA values
## Step 2: Manipulate Sport Names for Easier Processing
oly_data <- oly_data |>
mutate(Sport = case_when(
Sport %in% c("Luge", "Skeleton") ~ "Bobsleigh",
Sport %in% c("Taekwondo", "Judo") ~ "Martial Arts",
Sport == "Softball" ~ "Baseball",
Sport == "Short Track Speed Skating" ~ "Speed Skating",
TRUE ~ Sport)) |>                      # Default case to retain original names
# Use regex to rename based on the "Event" column
mutate(Sport = case_when(
grepl("Pole Vault", Event) & Sport == "Athletics" ~ "Athletics_PoleVault",
grepl("High Jump", Event) & Sport == "Athletics" ~ "Athletics_HighJumps",
grepl("Throw|Shot Put", Event) & Sport == "Athletics" ~ "Athletics_Weights",
grepl("100|110|200|400", Event) & Sport == "Athletics" ~ "Athletics_Sprints",
grepl("800|1,500|3,000", Event) & Sport == "Athletics" ~ "Athletics_MidDistance",
grepl("5,000|10,000", Event) & Sport == "Athletics" ~ "Athletics_LongDistance",
grepl("Sprint", Event) & Sport == "Cycling" ~ "Cycling_Sprints",
grepl("50 metres|100 metres", Event) & Sport == "Swimming" ~ "Swimming_Sprints",
TRUE ~ Sport)) |>                      # Default case to retain original names
# Further refining Sport names
mutate(Sport = case_when(
Sport == "Swimming" ~ "Swimming_Distance",
Sport == "Cycling" ~ "Cycling_Distance",
grepl("Jump", Event) & Sport == "Athletics" ~ "Athletics_Jumps",
TRUE ~ Sport))                         # Final default case
## Step 3: Create a Summary by Year
oly_byyear <- oly_data |>
group_by(Year) |>                        # Group by Year
distinct(Sport) |>                       # Get distinct Sports for each year
ungroup()                                # Ungroup to return to normal data frame
## Step 4: Clean Attributes Data
attr_data <- attr_rawdata |>
mutate(SPORT = case_when(
SPORT == "Skiing: Alpine" ~ "Alpine Skiing",
SPORT == "Skiing: Freestyle" ~ "Freestyle Skiing",
SPORT == "Racquetball/Squash" ~ "Racquets",
grepl("Track and Field", SPORT) ~ sub("Track and Field: ", "Athletics_", SPORT),  # Generalized regex for Athletics
TRUE ~ SPORT)) |>                      # Default case to retain original names
## Step 4: Clean Attributes Data
attr_data <- attr_rawdata |>
mutate(SPORT = case_when(
SPORT == "Skiing: Alpine" ~ "Alpine Skiing",
SPORT == "Skiing: Freestyle" ~ "Freestyle Skiing",
SPORT == "Racquetball/Squash" ~ "Racquets",
grepl("Track and Field", SPORT) ~ sub("Track and Field: ", "Athletics_", SPORT),  # Generalized regex for Athletics
TRUE ~ SPORT)) |>                      # Default case to retain original names
rename(Sport = SPORT) |>                 # Rename SPORT column to Sport
filter(Sport != "footballz")             # Remove irrelevant sports
# Load necessary libraries
library(dplyr)
library(tidyr)
library(readxl)
library(usethis)  # To save cleaned data
# Read the raw data
olym_rawdata <- read_csv("data-raw/dataset_olympics.csv")
attr_rawdata <- read_xlsx("data-raw/toughestsport_attributes.xlsx")
# Step 1: Clean Olympics Data
## Remove irrelevant columns and filter for relevant Olympic editions
oly_data <- olym_rawdata |>
select(-Medal, -Games, -ID, -Season) |>  # Remove unnecessary columns
filter(Year >= 1948) |>                  # Keep data from 1948 onward
drop_na()                                # Remove rows with NA values
# Step 2: Manipulate Sport Names for Easier Processing
oly_data <- oly_data |>
mutate(Sport = case_when(
Sport %in% c("Luge", "Skeleton") ~ "Bobsleigh",
Sport %in% c("Taekwondo", "Judo") ~ "Martial Arts",
Sport == "Softball" ~ "Baseball",
Sport == "Short Track Speed Skating" ~ "Speed Skating",
TRUE ~ Sport)) |>
# Use regex to rename based on the "Event" column
mutate(Sport = case_when(
grepl("Pole Vault", Event) ~ "Athletics_PoleVault",
grepl("High Jump", Event) ~ "Athletics_HighJumps",
grepl("Throw|Shot Put", Event) ~ "Athletics_Weights",
grepl("100|110|200|400", Event) ~ "Athletics_Sprints",
grepl("800|1,500|3,000", Event) ~ "Athletics_MidDistance",
grepl("5,000|10,000", Event) ~ "Athletics_LongDistance",
grepl("Sprint", Event) & Sport == "Cycling" ~ "Cycling_Sprints",
grepl("50 metres|100 metres", Event) & Sport == "Swimming" ~ "Swimming_Sprints",
TRUE ~ Sport)) |>
# Further refining Sport names
mutate(Sport = case_when(
Sport == "Swimming" ~ "Swimming_Distance",
Sport == "Cycling" ~ "Cycling_Distance",
grepl("Jump", Event) & Sport == "Athletics" ~ "Athletics_Jumps",
TRUE ~ Sport))  # Final default case
# Step 3: Create a Summary by Year
oly_byyear <- oly_data |>
group_by(Year) |>
distinct(Sport) |>
ungroup()  # Return to a regular data frame
# Step 4: Clean Attributes Data
attr_data <- attr_rawdata |>
mutate(SPORT = case_when(
SPORT == "Skiing: Alpine" ~ "Alpine Skiing",
SPORT == "Skiing: Freestyle" ~ "Freestyle Skiing",
SPORT == "Racquetball/Squash" ~ "Racquets",
grepl("Track and Field", SPORT) ~ sub("Track and Field: ", "Athletics_", SPORT),
TRUE ~ SPORT)) |>
rename(Sport = SPORT) |>  # Rename column
filter(Sport != "footballz")  # Remove irrelevant sports
# Step 5: Transform Attribute Data to Long Format
attr_long <- attr_data |>
select(-TOTAL, -RANK) |>  # Remove unnecessary columns
pivot_longer(cols = -Sport, names_to = "attr", values_to = "values")
# Step 6: Rank and Select Top 3 Attributes for Each Sport
top_attrs <- attr_long |>
group_by(Sport) |>
arrange(desc(values)) |>
slice_head(n = 3) |>  # Keep top 3 attributes
mutate(rank = row_number()) |>
select(Sport, attr, values, rank)
# Step 7: Pivot Wider to Get Top 3 Attributes in Separate Columns
attr_top_wide <- top_attrs |>
pivot_wider(names_from = rank, values_from = c(attr, values), names_sep = "_") |>
rename(
Top_1_attr = attr_1, Top_1_value = values_1,
Top_2_attr = attr_2, Top_2_value = values_2,
Top_3_attr = attr_3, Top_3_value = values_3)
# Step 8: Combine Data into a Unified Data Frame
olym_final <- left_join(oly_data, attr_top_wide, by = "Sport") |>
drop_na()  # Remove rows with NA values
# Final Data Validation
if (nrow(olym_final) == 0) {
stop("Final dataset is empty; please check previous cleaning steps.")
}
# Save the cleaned data to the data/ directory in .rda format
usethis::use_data(olym_final, overwrite = TRUE)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(readxl)
library(usethis)  # To save cleaned data
# Read the raw data
olym_rawdata <- read_csv("data-raw/dataset_olympics.csv")
attr_rawdata <- read_xlsx("data-raw/toughestsport_attributes.xlsx")
# Step 1: Clean Olympics Data
## Remove irrelevant columns and filter for relevant Olympic editions
oly_data <- olym_rawdata |>
select(-Medal, -Games, -ID, -Season) |>  # Remove unnecessary columns
filter(Year >= 1948) |>                  # Keep data from 1948 onward
drop_na()                                # Remove rows with NA values
# Step 2: Manipulate Sport Names for Easier Processing
oly_data <- oly_data |>
mutate(Sport = case_when(
Sport %in% c("Luge", "Skeleton") ~ "Bobsleigh",
Sport %in% c("Taekwondo", "Judo") ~ "Martial Arts",
Sport == "Softball" ~ "Baseball",
Sport == "Short Track Speed Skating" ~ "Speed Skating",
TRUE ~ Sport)) |>
# Use regex to rename based on the "Event" column
mutate(Sport = case_when(
grepl("Pole Vault", Event) ~ "Athletics_PoleVault",
grepl("High Jump", Event) ~ "Athletics_HighJumps",
grepl("Throw|Shot Put", Event) ~ "Athletics_Weights",
grepl("100|110|200|400", Event) ~ "Athletics_Sprints",
grepl("800|1,500|3,000", Event) ~ "Athletics_MidDistance",
grepl("5,000|10,000", Event) ~ "Athletics_LongDistance",
grepl("Sprint", Event) & Sport == "Cycling" ~ "Cycling_Sprints",
grepl("50 metres|100 metres", Event) & Sport == "Swimming" ~ "Swimming_Sprints",
TRUE ~ Sport)) |>
# Further refining Sport names
mutate(Sport = case_when(
Sport == "Swimming" ~ "Swimming_Distance",
Sport == "Cycling" ~ "Cycling_Distance",
grepl("Jump", Event) & Sport == "Athletics" ~ "Athletics_Jumps",
TRUE ~ Sport))  # Final default case
# Step 3: Create a Summary by Year
oly_byyear <- oly_data |>
group_by(Year) |>
distinct(Sport) |>
ungroup()  # Return to a regular data frame
# Step 4: Clean Attributes Data
attr_data <- attr_rawdata |>
mutate(SPORT = case_when(
SPORT == "Skiing: Alpine" ~ "Alpine Skiing",
SPORT == "Skiing: Freestyle" ~ "Freestyle Skiing",
SPORT == "Racquetball/Squash" ~ "Racquets",
grepl("Track and Field", SPORT) ~ sub("Track and Field: ", "Athletics_", SPORT),
TRUE ~ SPORT)) |>
rename(Sport = SPORT) |>  # Rename column
filter(Sport != "footballz")  # Remove irrelevant sports
# Step 5: Transform Attribute Data to Long Format
attr_long <- attr_data |>
select(-TOTAL, -RANK) |>  # Remove unnecessary columns
pivot_longer(cols = -Sport, names_to = "attr", values_to = "values")
# Step 6: Rank and Select Top 3 Attributes for Each Sport
top_attrs <- attr_long |>
group_by(Sport) |>
arrange(desc(values)) |>
slice_head(n = 3) |>  # Keep top 3 attributes
mutate(rank = row_number()) |>
select(Sport, attr, values, rank)
# Step 7: Pivot Wider to Get Top 3 Attributes in Separate Columns
attr_top_wide <- top_attrs |>
pivot_wider(names_from = rank, values_from = c(attr, values), names_sep = "_") |>
rename(
Top_1_attr = attr_1, Top_1_value = values_1,
Top_2_attr = attr_2, Top_2_value = values_2,
Top_3_attr = attr_3, Top_3_value = values_3)
# Step 8: Combine Data into a Unified Data Frame
olym_final <- left_join(oly_data, attr_top_wide, by = "Sport") |>
drop_na()  # Remove rows with NA values
# Final Data Validation
if (nrow(olym_final) == 0) {
stop("Final dataset is empty; please check previous cleaning steps.")
}
# Save the cleaned data to the data/ directory in .rda format
usethis::use_data(olym_final, overwrite = TRUE)
shiny::runApp("inst/better-app/plotting_app/")
library(shiny)
shiny::runApp("inst/better-app/plotting_app/")
shiny::runApp("better-app/plotting_app/")
runApp('inst/better-app/plotting_app.R')
runApp('inst/better-app/plotting_app.R')
runApp('inst/better-app/plotting_app.R')
devtools::install()
install.packages("devtools")
devtools::install()
.Last.error
pkgbuild::has_build_tools(debug = TRUE)
install.packages(c("usethis", "devtools", "pkgdown", "shiny", "plotly"))
devtools::install()
devtools::install()
devtools::document()
rlang::last_trace()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
exists("olym_final")
View(olym_final)
devtools::document()
devtools::install()
#' Launch the Shiny App
#'
#' @export
launch_app <- function() {
shiny::runApp(system.file("plotting_app", package = "rafliassign4"))
}
devtools::document()
rm(list = c("launch_app"))
devtools::load_all()
devtools::document()
launch_app()
launch_app()
rm(list = c("launch_app"))
devtools::load_all()
devtools::document()
launch_app()
launch_app()
launch_app()
load("~/001_Monash/ETC5523_COMMUNICATINGwithdata/rafliassign4/data/olym_final.rda")
View(oly_data)
View(olym_final)
launch_app()
rlang::last_trace()
appDir <- system.file("shiny_app", package = "rafliassign4")
print(appDir)
shiny::runApp("inst/shiny_app/")
devtools::document()
devtools::install()
devtools::document()
shiny::runApp("inst/shiny_app/")
devtools::document()
devtools::check()
devtools::check()
launch_app()
devtools::document()
usethis::use_data(olym_final, overwrite = TRUE)
devtools::document()
export(olym_final)
devtools::install()
devtools::document()
devtools::install()
# Load necessary libraries
library(dplyr)
library(tidyr)
library(readxl)
library(usethis)
# Read the raw data
olym_rawdata <- read_csv("data-raw/dataset_olympics.csv")
attr_rawdata <- read_xlsx("data-raw/toughestsport_attributes.xlsx")
# Step 1: Clean Olympics Data
## Remove irrelevant columns and filter for relevant Olympic editions
oly_data <- olym_rawdata |>
select(-Medal, -Games, -ID, -Season) |>  # Remove unnecessary columns
filter(Year >= 1948) |>                  # Keep data from 1948 onward
drop_na()                                # Remove rows with NA values
# Step 2: Manipulate Sport Names for Easier Processing
oly_data <- oly_data |>
mutate(Sport = case_when(
Sport %in% c("Luge", "Skeleton") ~ "Bobsleigh",
Sport %in% c("Taekwondo", "Judo") ~ "Martial Arts",
Sport == "Softball" ~ "Baseball",
Sport == "Short Track Speed Skating" ~ "Speed Skating",
TRUE ~ Sport)) |>
# Use regex to rename based on the "Event" column
mutate(Sport = case_when(
grepl("Pole Vault", Event) ~ "Athletics_PoleVault",
grepl("High Jump", Event) ~ "Athletics_HighJumps",
grepl("Throw|Shot Put", Event) ~ "Athletics_Weights",
grepl("100|110|200|400", Event) ~ "Athletics_Sprints",
grepl("800|1,500|3,000", Event) ~ "Athletics_MidDistance",
grepl("5,000|10,000", Event) ~ "Athletics_LongDistance",
grepl("Sprint", Event) & Sport == "Cycling" ~ "Cycling_Sprints",
grepl("50 metres|100 metres", Event) & Sport == "Swimming" ~ "Swimming_Sprints",
TRUE ~ Sport)) |>
# Further refining Sport names
mutate(Sport = case_when(
Sport == "Swimming" ~ "Swimming_Distance",
Sport == "Cycling" ~ "Cycling_Distance",
grepl("Jump", Event) & Sport == "Athletics" ~ "Athletics_Jumps",
TRUE ~ Sport))  # Final default case
# Step 3: Create a Summary by Year
oly_byyear <- oly_data |>
group_by(Year) |>
distinct(Sport) |>
ungroup()  # Return to a regular data frame
# Step 4: Clean Attributes Data
attr_data <- attr_rawdata |>
mutate(SPORT = case_when(
SPORT == "Skiing: Alpine" ~ "Alpine Skiing",
SPORT == "Skiing: Freestyle" ~ "Freestyle Skiing",
SPORT == "Racquetball/Squash" ~ "Racquets",
grepl("Track and Field", SPORT) ~ sub("Track and Field: ", "Athletics_", SPORT),
TRUE ~ SPORT)) |>
rename(Sport = SPORT) |>  # Rename column
filter(Sport != "footballz")  # Remove irrelevant sports
# Step 5: Transform Attribute Data to Long Format
attr_long <- attr_data |>
select(-TOTAL, -RANK) |>  # Remove unnecessary columns
pivot_longer(cols = -Sport, names_to = "attr", values_to = "values")
# Step 6: Rank and Select Top 3 Attributes for Each Sport
top_attrs <- attr_long |>
group_by(Sport) |>
arrange(desc(values)) |>
slice_head(n = 3) |>  # Keep top 3 attributes
mutate(rank = row_number()) |>
select(Sport, attr, values, rank)
# Step 7: Pivot Wider to Get Top 3 Attributes in Separate Columns
attr_top_wide <- top_attrs |>
pivot_wider(names_from = rank, values_from = c(attr, values), names_sep = "_") |>
rename(
Top_1_attr = attr_1, Top_1_value = values_1,
Top_2_attr = attr_2, Top_2_value = values_2,
Top_3_attr = attr_3, Top_3_value = values_3)
# Step 8: Combine Data into a Unified Data Frame
olym_final <- left_join(oly_data, attr_top_wide, by = "Sport") |>
drop_na()  # Remove rows with NA values
# Final Data Validation
if (nrow(olym_final) == 0) {
stop("Final dataset is empty; please check previous cleaning steps.")
}
# Save the cleaned data to the data/ directory in .rda format
usethis::use_data(olym_final, overwrite = TRUE)
devtools::document()
print(olym_final)
#' Launch the Shiny App
#'
#' This function launches the Olympics Data Explorer Shiny app.
#' @export
launch_app <- function() {
appDir <- system.file("shiny_app", package = "rafliassign4")
if (appDir == "") {
stop("Could not find the Shiny app directory. Please check the path.")
}
shiny::runApp(appDir)
}
#' olym_final: Dataset for Olympic Medals Analysis
#'
#' This dataset contains information about Olympic medals and attributes.
#'
#' @format A data frame with several columns, including:
#' \describe{
#'   \item{Name}{Athlete's name}
#'   \item{Sex}{Athlete's Gender}
#'   \item{Age}{Athlete's age}
#'   \item{Height}{Athlete's Gender}
#'   \item{Weight}{Athlete's Gender}
#'   \item{Team}{The country where the athlete's originated}
#'   \item{NOC}{Abbreviation of Olympic Entity Represented}
#'   \item{Year}{The year of Olympics participation}
#'   \item{City}{The city as the Olympics' Venue}
#'   \item{Sport}{The sport type participated}
#'   \item{Event}{The sport number or event participated}
#'   \item{Year}{The year of Olympics participation}
#'   \item{Top_1_attr}{The main attribute of the sport}
#'   \item{Top_2_attr}{The second highest attribute of the sport}
#'   \item{Top_3_attr}{The third highest attribute of the sport}
#'   \item{Top_1_value}{The numerical value of the main attribute}
#'   \item{Top_2_value}{The numerical value of second highest attribute}
#'   \item{Top_1_value}{The numerical value of third highest attribute}
#'
#' }
#' @source Generated during data cleaning.
#' @export
"olym_final"
devtools::document()
devtools::install()
devtools::install()
usethis::use_data(olym_final, overwrite = TRUE)
devtools::document()
export(olym_final)
rm(list = ls())
devtools::install()
install.packages("devtools")
devtools::install()
library(rafliassign4)
devtools::install()
.Last.error
load("data/olym_final.rda")
devtools::document()
rm(list = ls())
remove.packages("rafliassign4")
devtools::install()
.Last.error
devtools::install(quiet = FALSE)
devtools::install(quiet = FALSE)
.Last.error
tools:::.get_data_from_pkg("rafliassign4", "olym_final")
usethis::use_vignette(name = "crops", title = "Our World in Dat: Key Crop Yields")
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::install()
rm(list = ls())
devtools::install()
usethis::use_vignette(name = "olympics", title = "Pattern of Olympics Edition")
devtools::build_vignettes()
library(rafliassign4)
